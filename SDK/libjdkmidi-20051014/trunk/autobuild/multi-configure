#! /bin/sh

##############################################################################################
#
# The magic.makefile multi-configure script, Copyright 2004-2007 by Jeff Koftinoff <jeffk@jdkoftinoff.com>
# version 6.
#
# Simplifies the building of a c/c++ library, it's tests, tools, examples, and documentation.
#
# See http://opensource.jdkoftinoff.com/jdks/trac/wiki/MagicMakefileV6
# for more information, including license information (GPL). Note that this tool being GPL does
# NOT mean that it can only be used to build GPL projects.
#


# set relative_dir to the directory part of arg 0. Usually this is ../.. or somesuch.

relative_dir="$(dirname "$0")"
magic_PROJECT_TOP_DIR="$(cd ${relative_dir} && pwd)"
magic_AUTOBUILD_DIR=$(cd "${relative_dir}/autobuild" && pwd)

# load project specific sh definitions
. "${relative_dir}/project.sh"

# if we are called with --help

if [ x"$1" = x"--help" ]; then
    echo "multi-configure script based on J.D. Koftinoff Software Ltd.'s MagicMake system."
    echo "See http://opensource.jdkoftinoff.com/jdks/trac/jdks/wiki/MagicMakefileV6 for more information"
    echo ""
    exit 1
fi


# before we parse the command line arguments, do some rudimentary native machine investigation.


# parse all long options and set them as variables, allowing command line to override everything
# options are in the form of:
#   --abcd-efghi-jklmn=some_value
#
# and they get transformed via awk into environment vars in the form:
#   magic_ABCD_EFGHI_JKLMN="some_value"
#
# A bunch of variables have default values but can be overriden by the command line
# at the end of this script, all variables with the "magic_" prefix are outputted to the 
# GNUmakefile and the vars.sh  in the appropriate format. The script file './reconfigure' is created 
# with the current command line parameters
#
# This looks tricky but is really not so bad: The for loop prints each parameter, one per line 
# into a single instance of awk so it is quick.
#
# The awk script extracts the variable name as var, and the part after the first '=' as val
# It changes - to _, -- to nothing, converts the string to uppercase, prefixes the
# variable name with magic_, and prints val inside quotes.
#

for i in "$@"; do 
    p=`echo $i | awk '{  line=$0; i = index($0,"="); var = substr(line,0,i); gsub("=","",var); val = substr(line,i+1); gsub("-","_",var); sub("__","",var); print "magic_" toupper(var) "=\"" val "\"\n"; }' `
    eval $p
done



# extract all environment vars with the "magic_" prefix and save them in vars.sh and GNUmakefile in the appropriate form:
rm -f GNUmakefile
rm -f vars.sh
set | grep '^magic_' | sort | sed -n "s/magic_\(.*\)=\('*\)\([^']*\)\(.*\)/\1=\"\3\"/p"  >vars.sh
echo ". \"${magic_PROJECT_TOP_DIR}/project.sh\"" >>vars.sh
set | grep '^magic_' | sort | sed -n "s/magic_\(.*\)=\('*\)\([^']*\)\(.*\)/\1=\3/p"  >GNUmakefile

echo '.PHONY : first_target' >>GNUmakefile
echo 'first_target : everything' >>GNUmakefile
echo >>GNUmakefile
echo 'include $(PROJECT_TOP_DIR)/project.mak' >>GNUmakefile
echo 'include $(AUTOBUILD_DIR)/multi-magic.mak' >>GNUmakefile
if [ -n "$magic_MAKEFILES_DIR" ]; then
    echo '-include $(MAKEFILES_DIR)/*.mak' >>GNUmakefile
fi

if [ -f ./reconfigure ]; then
 mv ./reconfigure ./reconfigure-old
fi
echo "$0 \\"  >>./reconfigure
for i in "$@";
do
  echo " \"$i\" \\" >> ./reconfigure
done
echo \"\$@\" >>./reconfigure
chmod +x ./reconfigure
